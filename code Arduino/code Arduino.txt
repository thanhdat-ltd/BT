
//He thong theo doi va chong trom xe may

#include <SoftwareSerial.h>//
#include <AltSoftSerial.h>//........include libraries
#include <TinyGPS++.h>   //

String PHONE[] = {"+84774783036","+84933339179"};//Use number with country code
int phoneCount = sizeof(PHONE) / sizeof(PHONE[0]);

#define ignition_switch 12 //Connect this to ignition switch
#define rxPin 2//GSM Module RX pin to Arduino 3 
#define txPin 3//GSM Module TX pin to Arduino 2

SoftwareSerial sim7680(rxPin,txPin);
                   //GPS Module RX pin to Arduino 9
                  //GPS Module TX pin to Arduino 8
AltSoftSerial neogps;

TinyGPSPlus gps;

String sms_status,sender_number,received_date,msg;
unsigned long previousMillis = 0;
long interval = 60000;

void setup() {
  delay(7000);
  Serial.begin(115200);
  
  sim7680.begin(9600);
  neogps.begin(9600);
 
  pinMode(ignition_switch, OUTPUT);
  
  sms_status = "";
  sender_number="";
  received_date="";
  msg="";

  sim7680.print("AT+CMGF=1\r"); //SMS text mode
  delay(1000);
  }

void loop() {
   
 { 
  unsigned long currentMillis = millis();
    if(currentMillis - previousMillis > interval) 
    {
       previousMillis = currentMillis;
       sendGpsToServer();
    }
  }
  
  while(sim7680.available())
  {
    parseData(sim7680.readString());
  }
 
  while(Serial.available()) 
  {
    sim7680.println(Serial.readString());
  }
 }


bool isAllowedNumber(String number);

void parseData(String buff){
  Serial.println(buff);

  unsigned int len, index;
  index = buff.indexOf("\r");
  buff.remove(0, index+2);
  buff.trim();
  
    if(buff != "OK"){
    index = buff.indexOf(":");
    String cmd = buff.substring(0, index);
    cmd.trim();
    
    buff.remove(0, index+2);
    if(cmd == "+CMTI"){
      index = buff.indexOf(",");
      String temp = buff.substring(index+1, buff.length()); 
      temp = "AT+CMGR=" + temp + "\r"; 
      sim7680.println(temp); 
    }
    else if(cmd == "+CMGR"){
      extractSms(buff);
      
      if(isAllowedNumber(sender_number))
      {
            doAction();
         }
    }
  }
   else{
  }
}

bool isAllowedNumber(String number) {
    for (int i = 0; i < phoneCount; i++) {
        if (number == PHONE[i]) {
            return true; // Số điện thoại hợp lệ
        }
    }
    return false; // Không hợp lệ
}

void extractSms(String buff){
   unsigned int index;
   Serial.println(buff);

    index =buff.indexOf(",");
    sms_status = buff.substring(1, index-1); 
    buff.remove(0, index+2);
    
    sender_number = buff.substring(0, 13);
    buff.remove(0,19);
   
    received_date = buff.substring(0, 20);
    buff.remove(0,buff.indexOf("\r"));
    buff.trim();
    
    index =buff.indexOf("\n\r");
    buff = buff.substring(0, index);
    buff.trim();
    msg = buff;
    buff = "";
    msg.toLowerCase();
}

void doAction(){
    if(msg == "bike off"){
    digitalWrite(ignition_switch, HIGH);
    Serial.println("Bike off");
   {
      sendSms("Anti-theft ON");
    }
  }
  else if(msg == "bike on"){
    digitalWrite(ignition_switch, LOW);
    Serial.println("Bike on");
   {
      sendSms("Anti-theft OFF");
    }
  }
  else if(msg == "get location"){
    sendSmsGPS("Location");
  }
  sms_status = "";
  sender_number="";
  received_date="";
  msg="";  
}

void deleteSms()
{
  sendATcommand("AT+CMGD=1,4", "OK", 2000);
  Serial.println("All SMS are deleted.");
}

void sendSmsGPS(String text)
{
   boolean newData = false;
  for (unsigned long start = millis(); millis() - start < 2000;)
  {
    while (neogps.available())
    {
      if (gps.encode(neogps.read()))
      {
        newData = true;
      }
    }
  }
  if (newData)       {
    float flat, flon;
    unsigned long age;
    Serial.print("Latitude= "); 
    Serial.print(gps.location.lat(), 6);
    Serial.print(" Longitude= "); 
    Serial.println(gps.location.lng(), 6);
    newData = false;
    delay(300);

   for (int i = 0; i < phoneCount; i++) {
    sim7680.print("AT+CMGF=1\r");
    delay(1000);
    sim7680.print("AT+CMGS=\""+PHONE[i]+"\"\r");
    delay(1000);
    sim7680.print("http://maps.google.com/maps?q=loc:");
    sim7680.print(gps.location.lat(), 6);
    sim7680.print(",");
    sim7680.print(gps.location.lng(), 6);
    delay(100);
    sim7680.write(0x1A);
    delay(1000);
     }
  }
}

void sendSms(String text)
{
  for (int i = 0; i < phoneCount; i++) {
    sim7680.print("AT+CMGF=1\r");
    delay(1000);
    sim7680.print("AT+CMGS=\""+PHONE[i]+"\"\r");
    delay(1000);
    sim7680.print(text);
    delay(100);
    sim7680.write(0x1A);
    delay(1000);
    Serial.println("SMS Sent Successfully.");
   }
}
int8_t sendATcommand(char* ATcommand, char* expected_answer, unsigned int timeout){

    uint8_t x=0,  answer=0;
    char response[100];
    unsigned long previous;

    memset(response, '\0', 100); 
    
    delay(100);
    
    while( sim7680.available() > 0) sim7680.read();    
    
    if (ATcommand[0] != '\0')
    {
        sim7680.println(ATcommand); 
    }


    x = 0;
    previous = millis();

    
    do{
        if(sim7680.available() != 0){    
            response[x] = sim7680.read();
            //Serial.print(response[x]);
            x++;
            if (strstr(response, expected_answer) != NULL)  
            {
                answer = 1;
            }
        }
    }while((answer == 0) && ((millis() - previous) < timeout)); 

    return answer;
}
int sendGpsToServer()
{
}